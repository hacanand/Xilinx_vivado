
module mux_4_1(input [3:0] data_in, input [1:0] sel, output reg data_out);
always @ (sel or data_in)
begin
    case(sel)
        2'b00: data_out = data_in[0];
        2'b01: data_out = data_in[1];
        2'b10: data_out = data_in[2];
        2'b11: data_out = data_in[3];
    endcase
end

module demux_1_4(input [3:0] data_in, input [1:0] sel, output reg [3:0] data_out);
always @ (sel or data_in)
begin
    case(sel)
        2'b00: {data_out[0],data_out[1],data_out[2],data_out[3]} = {data_in,4'b0000};
        2'b01: {data_out[0],data_out[1],data_out[2],data_out[3]} = {4'b0000,data_in};
        2'b10: {data_out[0],data_out[1],data_out[2],data_out[3]} = {data_in[0],3'b000,data_in[1],2'b00,data_in[2],1'b0,data_in[3]};
        2'b11: {data_out[0],data_out[1],data_out[2],data_out[3]} = {data_in[0],2'b00,data_in[1],3'b000,data_in[2],4'b000};
    endcase
end
